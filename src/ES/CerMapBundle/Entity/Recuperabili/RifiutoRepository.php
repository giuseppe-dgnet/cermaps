<?php

namespace ES\CerMapBundle\Entity\Recuperabili;

/**
 * RifiutiRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RifiutoRepository extends RifiutoMotore {

    /**
     * 
     * @param type $sigla
     * @return Rifiuto
     */
    public function ricercaDaSigla($sigla) {
        $pericoloso = strpos($sigla, '*') !== false;
        $codici = explode('.', str_replace('*', '', $sigla));
        if(count($codici) != 2) {
            return null;
        }
        $q = $this->createQueryBuilder('r')
                ->leftJoin('r.categoria', 'c')
                ->where('c.pericoloso = :pericolo')
                ->setParameter('pericolo', $pericoloso)
                ->andWhere('c.indice = :indice')
                ->setParameter('indice', $codici[0])
                ->andWhere('r.numero = :numero')
                ->setParameter('numero', preg_replace('/[a-z]/', '', $codici[1]))
        ;
        $results = $q->getQuery()->execute();
        return array_shift($results);
    }

    function findPrevNext($id, $categoria_id) {
        $q_prev = $this->createQueryBuilder('r')
                ->where('r.id < :id')
                ->andWhere('r.categoria = :categoria')
                ->orderBy('r.id', 'DESC')
        ;
        $dql_prev = $this->getEntityManager()->createQuery($q_prev->getDQL());
        $dql_prev->setParameter('id', $id);
        $dql_prev->setParameter('categoria', $categoria_id);
        $prev = $this->getFirstOrNull($dql_prev);
        if (!$prev) {
            $q_prev = $this->createQueryBuilder('r')
                    ->where('r.id > :id')
                    ->andWhere('r.categoria = :categoria')
                    ->orderBy('r.id', 'DESC')
            ;
            $dql_prev = $this->getEntityManager()->createQuery($q_prev->getDQL());
            $dql_prev->setParameter('id', $id);
            $dql_prev->setParameter('categoria', $categoria_id);
            $prev = $this->getFirstOrNull($dql_prev);
            ;
        }

        $q_next = $this->createQueryBuilder('r')
                ->where('r.id > :id')
                ->andWhere('r.categoria = :categoria')
                ->orderBy('r.id', 'ASC')
        ;
        $dql_next = $this->getEntityManager()->createQuery($q_next->getDQL());
        $dql_next->setParameter('id', $id);
        $dql_next->setParameter('categoria', $categoria_id);
        $next = $this->getFirstOrNull($dql_next);
        if (!$next) {
            $q_next = $this->createQueryBuilder('r')
                    ->where('r.id < :id')
                    ->andWhere('r.categoria = :categoria')
                    ->orderBy('r.id', 'ASC')
            ;
            $dql_next = $this->getEntityManager()->createQuery($q_next->getDQL());
            $dql_next->setParameter('categoria', $categoria_id);
            $dql_next->setParameter('id', $id);
            $next = $this->getFirstOrNull($dql_next);
        }
        return array('prev' => $prev ? array('slug' => $prev->getSlug(), 'titolo' => $prev->getRifiuto()) : null, 'next' => $next ? array('slug' => $next->getSlug(), 'titolo' => $next->getRifiuto()) : null);
    }

    private function getFirstOrNull(\Doctrine\ORM\Query $dql) {
        $result = $dql->execute();
        if (is_array($result)) {
            return array_shift($result);
        }
        return $result;
    }

    public function all($pag = 1) {
        $q = $this->createQueryBuilder('r')
                ->leftJoin('r.categoria', 'c')
                ->orderBy('c.id DESC, r.numero', 'DESC')
        ;
        $dql = $this->getEntityManager()->createQuery($q->getDQL());

        $dql->setFirstResult(($pag - 1) * 10)
                ->setMaxResults(10)
        ;
        return $dql->execute(); //getResult();
    }

    public function count() {
        $q = $this->createQueryBuilder('r');
        $q->add('select', $q->expr()->count('r.id'))
                ->leftJoin('r.categoria', 'c')
        ;
        $dql = $this->getEntityManager()->createQuery($q->getDQL());

        return $dql->getSingleScalarResult(); //getResult();
    }

}