<?php

namespace ES\CerMapBundle\Entity\Mps;

use Doctrine\ORM\EntityRepository;

/**
 * MateriaPrimaSecondaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MpsMotore extends EntityRepository {

    public function cerca($term) {
    
        $q = $this->createQueryBuilder('s');
        $q->leftJoin('s.categoria', 'c');
        $sql_or = array();
        $sql_or[] = 's.materia LIKE :titolo';
        $sql_or[] = 's.descrizione LIKE :titolo';
        $sql_or[] = 'c.categoria LIKE :titolo';
        $sql_or[] = 'c.nome LIKE :titolo';
        $q->andWhere('(' . implode(') OR (', $sql_or) . ')');
        $q->setParameter('titolo', "%{$term}%");

        $results = $q->getQuery()->execute();
        
        $_out = $out = array();
        $i = 0;
        foreach ($results as $_result) {
            /* @var $_result \ES\CerMapBundle\Entity\Mps\Mps */
            $count = 0;
            preg_match_all("/{$term}/", $_result->getMateria(), $match);
            $count += count($match[0]) * 5;
            preg_match_all("/{$term}/", $_result->getDescrizione(), $match);
            $count += count($match[0]) * 3;
            preg_match_all("/{$term}/", $_result->getCategoria()->getNome(), $match);
            $count += count($match[0]) * 2;
            preg_match_all("/{$term}/", $_result->getCategoria()->getCategoria(), $match);
            $count += count($match[0]) * 1;
            $count = 100000 - $count * 1000 + $i++;
            $descrizione ="";
            if($_result->getDescrizione() != ""){
                $descrizione = "(".$_result->getDescrizione().")";
            }else{
                $descrizione ="";
            }
            $_out[$count] = array(
                'id' => $_result->getSlug(),
                'slug' => $_result->getSlug(),
                'label' => "{$_result->getMateria()} {$descrizione}",
                'value' => "{$_result->getMateria()} {$descrizione}",
                'materia' => $_result->getMateria(),
                'descrizione' => $_result->getDescrizione(),
                'categoria' => 'mps',
            );
            ksort($_out);
        }
        return $_out;
    }
    
    public function motore($term, $f_mps, $limit = 1000) {
        $all = null;
        if (!$f_mps['complete'] && !$f_mps['alcune']) {
            return array(
                'totale' => 0,
                'results' => array(),
                'complete' => 0,
                'alcune' => 0,
                'noresults' => true,
                'n' => array(
                    'pericolosi' => 0,
                    'non_pericolosi' => 0,
                ),
            );
        }
        if (!$f_mps['complete'] && $f_mps['alcune']) {
            $all = false;
        }
        if ($f_mps['complete']) {
            $all = true;
            $f_mps['complete'] = false;
        }

        $results = array();

        if ($term && $term['find']) {
            $inner_join = array(
                'mps_categorie_mps c' => 'm.categoria_id = c.id',
                'search_entities_words w' => 'w.entity_id = m.id',
            );

            $sql = "
SELECT m.id as mps, sum(w.recurrence) as punti
  FROM mps_materie_prime_seconde m
            ";
            foreach ($inner_join as $tabella => $join) {
                $sql .= "
 INNER JOIN {$tabella} ON {$join}
            ";
            }
            $sql .= "
 WHERE w.word_id IN (" . implode(", ", $term['id']) . ")
            ";
            $sql .= "
 GROUP BY m.id
HAVING count(*) " . ($all ? " = " : " < ") . count($term['id']) . " 
 ORDER BY punti DESC
 LIMIT 0, {$limit}
        ";

//            \EcoSeekr\Bundle\WebBundle\Functions\Funzioni::pr($sql, true);

            $connection = $this->getEntityManager()->getConnection();
            $stmt = $connection->executeQuery($sql);
            $results = $stmt->fetchAll();
            foreach ($results as $key => $mps) {
                unset($results[$key][0], $results[$key][1]);
            }
        }
        $tot = count($results);
        $out = array(
            'totale' => $tot,
            'complete' => $all ? $tot : 0,
            'alcune' => $all ? 0 : $tot,
            'results' => $results,
            'noresults' => count($results) == 0,
            'n' => array(
            ),
        );
        
        if($all && count($term['id']) > 1 && $out['totale'] < $limit) {
            $incompleti = $this->motore($term, $f_mps);
            $out['totale'] = $out['totale'] + $incompleti['totale'];
            $out['complete'] = $out['complete'] + $incompleti['complete'];
            $out['alcune'] = $out['alcune'] + $incompleti['alcune'];
            $out['results'] = array_merge($out['results'], $incompleti['results']);
            $out['noresults'] = $out['noresults'] && $incompleti['noresults'];
        }

        return $out;
    }

    function getResults($results) {
        $ids = array();
        $out = array();
        foreach ($results as $_key => $_result) {
            if (!in_array($_result['mps'], $ids)) {
                $ids[] = $_result['mps'];
                $_s = microtime(true);
                $found = array('word');
                $punti = $_result['punti'];
                $result = $this->find($_result['mps']);

                $out[$result->getId()] = array(
                    'show' => true,
                    'punti' => $punti,
                    'found' => $found,
                    'result' => array(
                        'id' => $result->getId(),
                        'result' => 'mps',
                        'route' => $result->getExtraField(),
                        'slug' => $result->getSlug(),
                        'titolo' => $result->getTitolo(),
                        'data' => array(
                            'mps' => $result->getMateria(),
                            'descrizione' => $result->getDescrizione(),
                            'categoria' => array(
                                'nome' => $result->getCategoria()->getNome(),
                                'categoria' => $result->getCategoria()->getCategoria(),
                            ),
                        ),
                    )
                );
            }
        }

//        Funzioni::vd($out);

        return $out;
    }
}