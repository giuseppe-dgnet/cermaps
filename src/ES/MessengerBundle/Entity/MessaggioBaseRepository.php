<?php

namespace ES\MessengerBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * MessaggioBaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessaggioBaseRepository extends EntityRepository {

    public function casella(\ES\UserBundle\Entity\User $utente, $lasttimestamp = false, $firstResult = 0, $maxResults = 10) {
        $q = $this->getMessaggi($utente, array('cer' => true, 'mps' => true, 'servizi' => true, 'rdi' => true, 'post' => true, 'system' => true));

        $q->andWhere('d.archiviato = :false');
        $q->andWhere('d.spam = :false');
        $q->setParameter('false', false);

        if ($lasttimestamp) {
            $q->andWhere('d.notificato = :lts');
            $q->setParameter('lts', false);
//            $q->andWhere('m.created_at > :lts');
//            $q->setParameter('lts', $lasttimestamp);
        }

        $q->setMaxResults($maxResults);
        $q->setFirstResult($firstResult);

        $dql = $q->getQuery();
//        \ES\WebBundle\Functions\Funzioni::pr($dql->getSQL(), true);
//        \ES\WebBundle\Functions\Funzioni::pr($dql->getParameters());
        return $this->cercaConversazioni($dql->execute(), $utente);
    }

    public function filtraCasella(\ES\UserBundle\Entity\User $utente, array $request, $lasttimestamp = false, $firstResult = 0, $maxResults = 10) {
        $tipo = $request['filtro'];
        $q = $this->getMessaggi($utente, $tipo);
        $stato = $request['tipo'];
        if (is_string($stato)) {
            $_stato = json_decode($stato);
            $stato = array();
            foreach ($_stato as $_k => $_v) {
                $stato[$_k] = $_v;
            }
        } else {
            $_stato = $stato;
            $stato = array();
            foreach ($_stato as $_k => $_v) {
                $_v = strtolower($_v);
                $stato[$_k] = $_v != 'null' ? $_v == 'true' : null;
            }
        }

        if ($lasttimestamp) {
            $q->andWhere('d.notificato = :lts');
            $q->setParameter('lts', false);
//            $q->andWhere('m.created_at > :lts');
//            $q->setParameter('lts', $lasttimestamp);
        }

        if (is_bool($stato["read"])) {
            $q->andWhere('d.letto = :letto');
            $q->setParameter('letto', $stato["read"]);
        }

        if (is_bool($stato["stored"])) {
            $q->andWhere('d.archiviato = :archiviato');
            $q->setParameter('archiviato', $stato["stored"]);
        }

        if (is_bool($stato["send"])) {
            $q->leftJoin('m.from_utente', 'f');
            if ($stato["send"]) {
                $q->andWhere('f.id = :id_utente');
            } else {
                $q->andWhere('f.id != :id_utente');
            }
            $q->setParameter('id_utente', $utente->getUser());
        }

        if (is_bool($stato["spam"])) {
            $q->andWhere('d.spam = :spam');
            $q->setParameter('spam', $stato["spam"]);
        }

        $q->setMaxResults($maxResults);
        $q->setFirstResult($firstResult);

        $dql = $q->getQuery();

        if (false) {
            echo $dql->getSql();
            var_dump($dql->getParameters());
            exit;
        }

        if ($firstResult < 10) {
            $q->select('count(m.id)');
            $out = array(
                'risultati_totali' => $q->getQuery()->getSingleScalarResult(),
                'risultato' => $this->cercaConversazioni($dql->execute(), $utente, $request['filtro']),
            );
        } else {
            $out = array(
                'risultati_totali' => "",
                'risultato' => $this->cercaConversazioni($dql->execute(), $utente, $request['filtro']),
            );
        }
//        \ES\WebBundle\Functions\Funzioni::vd($out);

        return $out;


        //return $this->cercaConversazioni($dql->execute(), $utente, $request['filtro']);
    }

    public function visualizzaMessaggi(\ES\UserBundle\Entity\User $utente, $id_utente) {
        //$q = $this->createQueryBuilder('m');
        $q = $this->getMessaggi($utente, array('cer' => true, 'mps' => true, 'servizi' => true, 'rdi' => true, 'post' => true, 'system' => true));
        $q->leftJoin('m.destinatari', 'dd');    //destinatario
        $q->leftJoin('dd.destinatario', 'uu'); //utente

        $q->andWhere('uu.id = :user2');
        $q->setParameter('user2', $id_utente);
        //$q->setParameter('user', $utente->getId());
//        $q->andWhere('m.id = :id_msg');
//        $q->setParameter('id_msg', 'user.id');


        $dql = $q->getQuery();


        return $this->cercaConversazioni($dql->execute(), $utente);
    }

    /**
     *
     * @param \ES\UserBundle\Entity\User $utente
     * @return \Doctrine\ORM\QueryBuilder 
     */
    public function test(\ES\UserBundle\Entity\User $utente, $request) {
        $q = $this->createQueryBuilder('m');
        return $q;
    }

//        public function filtra_ricerca(\ES\UserBundle\Entity\User $utente, \Symfony\Component\HttpFoundation\Request $request, $formato="json") {
//    public function filtra_ricerca(\ES\UserBundle\Entity\User $utente, \Symfony\Component\HttpFoundation\Request $request, $formato="json") {
//        try {
//            $q = $this->getMessaggi($utente, array('cer' => true, 'mps' => true, 'servizi' => true, 'rdi' => true));            
//            $q->andWhere('m.subject like :oggetto');
//            $q->setParameter('oggetto', '%' . $request->get('name_startsWith') . '%');
//            $dql = $q->getQuery();
//            $results = $dql->execute(); //ARRAY COLLECTION
//
//            $out = array();
//            foreach ($results as $result) {
//                $conversazione = $result->getConversazione();
//                
//                if($formato == "json") {
//                    $out[$conversazione->getId()] = array(
//                        'id' => $conversazione->getSubject(),
//                        'label' => $conversazione->getSubject(),
//                        'slug' => $conversazione->getSlug(),
//                    );
//                }else{                    
//                    $out = $this->cercaConversazioni($dql->execute(), $utente);
//                    
//                }
//                
//            }
//            
//            return $out;
//        } catch (\Exception $e) {
//            throw $e;
//        }
//        
//        //return $this->cercaConversazioni($dql->execute(), $request);
//    }

    public function filtra_ricerca(\ES\UserBundle\Entity\User $utente, \Symfony\Component\HttpFoundation\Request $request, $formato = "json") {
        try {
            $q = $this->getMessaggi($utente, array('cer' => true, 'mps' => true, 'servizi' => true, 'rdi' => true, 'post' => true, 'system' => true));
            //$q->andWhere('m.subject like :oggetto');
//            $q->orWhere('m.subject like :oggetto');
//            $q->orWhere('m.from_nome like :oggetto');
//            $q->orWhere('m.from_cognome like :oggetto');
//           
            $q->andWhere("m.subject like :oggetto OR 
                           m.from_nome like :oggetto OR
                           m.from_cognome like :oggetto ");


            $q->setParameter('oggetto', '%' . $request->get('name_startsWith') . '%');
            $dql = $q->getQuery();
            $results = $dql->execute(); //ARRAY COLLECTION

            $out = array();
            foreach ($results as $result) {

                $conversazione = $result->getConversazione();

                if ($formato == "json") {
                    $out[$conversazione->getId()] = array(
                        'id' => $conversazione->getSubject(),
                        'label' => $conversazione->getSubject(),
                        'slug' => $conversazione->getSlug(),
                    );
                } else {
                    $out = $this->cercaConversazioni($dql->execute(), $utente);
                }
            }

            return $out;
        } catch (\Exception $e) {
            throw $e;
        }

        //return $this->cercaConversazioni($dql->execute(), $request);
    }

    /**
     *
     * @param \ES\UserBundle\Entity\User $utente
     * @return \Doctrine\ORM\QueryBuilder 
     */
    public function getMessaggi(\ES\UserBundle\Entity\User $utente, $tipologie) {
        $q = $this->createQueryBuilder('m');

        if (is_string($tipologie)) {
            $tipologie = json_decode(str_replace("'", '"', $tipologie));
        } else {
            $_tipologie = array();
            foreach ($tipologie as $tipologia => $value) {

                if ($value == 'true') {
                    $_tipologie[] = $tipologia;
                }
            }
            //exit;
            $tipologie = $_tipologie;
        }

        $q->leftJoin('m.destinatari', 'd');
        $q->leftJoin('d.destinatario', 'u');
        $q->andWhere('u.id = :user');
        $q->andWhere($q->expr()->in('m.tipologia', $tipologie));
        $q->orderBy('m.updated_at', 'DESC');

        $q->setParameter('user', $utente->getId());
        return $q;
    }

    /**
     * Elimina le conversazioni doppie
     * 
     * @param type $results
     * @return \Doctrine\Common\Collections\ArrayCollection 
     */
    public function cercaConversazioni($results, \ES\UserBundle\Entity\User $utente, $request = null) {
        $output = array();
        foreach ($results as $result) {
            $result->cercaDestinatario($utente);
            $output[$result->getLastId()] = $result;
        }
        krsort($output);
        return $output;
    }

    public function getCentroMessaggi(\ES\UserBundle\Entity\User $utente) {
        $connection = $this->getEntityManager()->getConnection();
        $q = "SELECT * FROM msg_centro_messaggi_view WHERE user_id = :id";

        $stmt = $connection->executeQuery($q, array('id' => $utente->getId()));
        return $stmt->fetch();
    }

}